#!/bin/bash

echo "üîÄ Pr√©paration de Pull Request - LiveShop Link"
echo "=============================================="

# Configuration
BACKEND_DIR="liveshop-backend"
WEB_CLIENT_DIR="web-client/liveshop-client"
MOBILE_APP_DIR="mobile-app/liveshop-vendor"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier le statut git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Ce n'est pas un d√©p√¥t git valide !"
    exit 1
fi

# V√©rifier s'il y a des modifications non commit√©es
if ! git diff-index --quiet HEAD --; then
    print_warning "‚ö†Ô∏è  Modifications non commit√©es d√©tect√©es !"
    echo ""
    echo "üìù Fichiers modifi√©s :"
    git diff --name-only
    echo ""
    echo "üí° Commitez d'abord vos modifications :"
    echo "   git add ."
    echo "   git commit -m 'Description des modifications'"
    echo ""
    read -p "Voulez-vous continuer quand m√™me ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# V√©rifier s'il y a des commits non pouss√©s
if [ "$(git rev-list HEAD..origin/main --count)" -gt 0 ]; then
    print_warning "‚ö†Ô∏è  Commits non pouss√©s d√©tect√©s !"
    echo ""
    echo "üì§ Poussez d'abord vos commits :"
    echo "   git push origin main"
    echo ""
    read -p "Voulez-vous continuer quand m√™me ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Analyser les modifications depuis la branche main
print_status "üîç Analyse des modifications depuis main..."

# Obtenir la branche actuelle
CURRENT_BRANCH=$(git branch --show-current)
MAIN_BRANCH="main"

if [ "$CURRENT_BRANCH" = "$MAIN_BRANCH" ]; then
    print_error "Vous √™tes d√©j√† sur la branche main !"
    echo "üí° Cr√©ez une nouvelle branche pour votre PR :"
    echo "   git checkout -b feature/nom-de-votre-feature"
    exit 1
fi

# Analyser les diff√©rences avec main
print_status "üìä Diff√©rences avec $MAIN_BRANCH..."

BACKEND_CHANGES=$(git diff --name-only $MAIN_BRANCH..HEAD | grep "^$BACKEND_DIR/" | wc -l)
WEB_CLIENT_CHANGES=$(git diff --name-only $MAIN_BRANCH..HEAD | grep "^$WEB_CLIENT_DIR/" | wc -l)
MOBILE_APP_CHANGES=$(git diff --name-only $MAIN_BRANCH..HEAD | grep "^$MOBILE_APP_DIR/" | wc -l)

TOTAL_CHANGES=$((BACKEND_CHANGES + WEB_CLIENT_CHANGES + MOBILE_APP_CHANGES))

echo ""
print_status "üìà R√©sum√© des modifications :"
echo "  - Backend: $BACKEND_CHANGES modification(s)"
echo "  - Web Client: $WEB_CLIENT_CHANGES modification(s)"
echo "  - Mobile App: $MOBILE_APP_CHANGES modification(s)"
echo "  - Total: $TOTAL_CHANGES modification(s)"

# Afficher les fichiers modifi√©s par cat√©gorie
echo ""
if [ $BACKEND_CHANGES -gt 0 ]; then
    print_status "üîß Modifications Backend :"
    git diff --name-only $MAIN_BRANCH..HEAD | grep "^$BACKEND_DIR/" | sed 's/^/  - /'
    echo ""
fi

if [ $WEB_CLIENT_CHANGES -gt 0 ]; then
    print_status "üåê Modifications Web Client :"
    git diff --name-only $MAIN_BRANCH..HEAD | grep "^$WEB_CLIENT_DIR/" | sed 's/^/  - /'
    echo ""
fi

if [ $MOBILE_APP_CHANGES -gt 0 ]; then
    print_status "üì± Modifications Mobile App :"
    git diff --name-only $MAIN_BRANCH..HEAD | grep "^$MOBILE_APP_DIR/" | sed 's/^/  - /'
    echo ""
fi

# Recommandations pour la PR
echo ""
print_status "üöÄ Recommandations pour votre Pull Request :"

if [ $BACKEND_CHANGES -gt 0 ]; then
    echo ""
    echo "üîß **Backend modifi√©** :"
    echo "  - ‚úÖ Testez l'API localement avant de cr√©er la PR"
    echo "  - ‚úÖ V√©rifiez que les migrations sont compatibles"
    echo "  - ‚úÖ Assurez-vous que les tests passent"
    echo "  - ‚ö†Ô∏è  D√©ployez d'abord le backend, puis les clients"
fi

if [ $WEB_CLIENT_CHANGES -gt 0 ]; then
    echo ""
    echo "üåê **Web Client modifi√©** :"
    echo "  - ‚úÖ Testez l'interface localement"
    echo "  - ‚úÖ V√©rifiez la compatibilit√© avec l'API"
    echo "  - ‚úÖ Testez sur diff√©rents navigateurs"
fi

if [ $MOBILE_APP_CHANGES -gt 0 ]; then
    echo ""
    echo "üì± **Mobile App modifi√©e** :"
    echo "  - ‚úÖ Testez sur diff√©rents appareils"
    echo "  - ‚úÖ V√©rifiez la compatibilit√© avec l'API"
    echo "  - ‚úÖ Testez les fonctionnalit√©s offline"
fi

# G√©n√©rer le template de PR
echo ""
print_status "üìù Template de Pull Request :"
echo ""

PR_TITLE=""
if [ $BACKEND_CHANGES -gt 0 ] && [ $WEB_CLIENT_CHANGES -gt 0 ] && [ $MOBILE_APP_CHANGES -gt 0 ]; then
    PR_TITLE="üîÑ Mise √† jour compl√®te : Backend, Web Client et Mobile App"
elif [ $BACKEND_CHANGES -gt 0 ] && [ $WEB_CLIENT_CHANGES -gt 0 ]; then
    PR_TITLE="üîß Mise √† jour : Backend et Web Client"
elif [ $BACKEND_CHANGES -gt 0 ] && [ $MOBILE_APP_CHANGES -gt 0 ]; then
    PR_TITLE="üîß Mise √† jour : Backend et Mobile App"
elif [ $WEB_CLIENT_CHANGES -gt 0 ] && [ $MOBILE_APP_CHANGES -gt 0 ]; then
    PR_TITLE="üåê Mise √† jour : Web Client et Mobile App"
elif [ $BACKEND_CHANGES -gt 0 ]; then
    PR_TITLE="üîß Mise √† jour Backend"
elif [ $WEB_CLIENT_CHANGES -gt 0 ]; then
    PR_TITLE="üåê Mise √† jour Web Client"
elif [ $MOBILE_APP_CHANGES -gt 0 ]; then
    PR_TITLE="üì± Mise √† jour Mobile App"
else
    PR_TITLE="üìù Mise √† jour divers"
fi

echo "**Titre de la PR :**"
echo "$PR_TITLE"
echo ""

echo "**Description :**"
echo "## üìã R√©sum√© des modifications"
echo ""
if [ $BACKEND_CHANGES -gt 0 ]; then
    echo "- üîß **Backend** : $BACKEND_CHANGES modification(s)"
fi
if [ $WEB_CLIENT_CHANGES -gt 0 ]; then
    echo "- üåê **Web Client** : $WEB_CLIENT_CHANGES modification(s)"
fi
if [ $MOBILE_APP_CHANGES -gt 0 ]; then
    echo "- üì± **Mobile App** : $MOBILE_APP_CHANGES modification(s)"
fi
echo ""
echo "## üß™ Tests effectu√©s"
echo "- [ ] Tests locaux r√©ussis"
echo "- [ ] Compatibilit√© API v√©rifi√©e"
echo "- [ ] Tests de r√©gression effectu√©s"
echo ""
echo "## üöÄ Impact du d√©ploiement"
echo "- **Services affect√©s** : [Listez les services]"
echo "- **Ordre de d√©ploiement recommand√©** : [Backend ‚Üí Clients]"
echo "- **Rollback possible** : [Oui/Non]"
echo ""
echo "## üìù Notes suppl√©mentaires"
echo "[Ajoutez ici toute information importante]"

echo ""
print_success "üéâ Template de PR g√©n√©r√© !"
echo ""
echo "üí° **Prochaines √©tapes :**"
echo "1. Copiez le template ci-dessus"
echo "2. Cr√©ez votre Pull Request sur GitHub"
echo "3. Collez le template dans la description"
echo "4. Assignez les reviewers appropri√©s"
echo "5. Le CI/CD se d√©clenchera automatiquement"
echo ""
echo "üîó **Liens utiles :**"
echo "- GitHub Actions: .github/workflows/"
echo "- D√©ploiement: V√©rifiez votre pipeline CI/CD"
echo "- Monitoring: Surveillez le d√©ploiement"
