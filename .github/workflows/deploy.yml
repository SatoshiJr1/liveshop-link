name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy files to server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          source: "."
          target: "/srv/projects/livelink"
          rm: false

      - name: Deploy with SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /srv/projects/livelink
              
            # Forcer la production
            export NODE_ENV=production
            
            # V√©rifier que DATABASE_URL est configur√©
            if [ -z "$DATABASE_URL" ]; then
              echo "‚ö†Ô∏è ATTENTION: DATABASE_URL non configur√© en production!"
              echo "üîß Tentative de configuration automatique..."
              
              # Essayer de r√©cup√©rer depuis docker-compose
              export DATABASE_URL="postgresql://liveshop_user:motdepassefort@fitsen-postgresql:5432/liveshop"
              echo "üîó DATABASE_URL configur√©: ${DATABASE_URL:0:20}..."
            fi
            
            echo "üöÄ D√©ploiement en mode PRODUCTION"
            echo "üìä Base de donn√©es: PostgreSQL"
            echo "üîó DATABASE_URL: ${DATABASE_URL:0:20}..."
            
            # D√©ployer avec rebuild forc√©
            docker compose down
            docker compose pull
            docker compose up -d --build --force-recreate
            
            echo "‚úÖ D√©ploiement termin√©!"
            echo "üîç V√©rification des services..."
            docker compose ps
            
            # Attendre que le backend soit pr√™t
            echo "‚è≥ Attente du d√©marrage du backend..."
            sleep 10
            
            # Migration des commentaires
            echo "üîß Migration des commentaires..."
            docker compose exec -T backend node src/scripts/migrate-production.js || {
              echo "‚ö†Ô∏è Migration des commentaires √©chou√©e, v√©rification manuelle..."
              docker compose exec -T backend node -e "
                const { sequelize } = require('./src/config/database');
                sequelize.query('SELECT table_name FROM information_schema.tables WHERE table_name = \\'comments\\'').then(([rows]) => {
                  console.log('Tables comments:', rows);
                  process.exit(0);
                }).catch(err => {
                  console.error('Erreur:', err);
                  process.exit(1);
                });
              "
            }
            
            # Ex√©cuter le seeding automatique
            echo "üå± D√©marrage du seeding automatique..."
            docker compose exec -T backend node src/scripts/seed-production.js || {
              echo "‚ö†Ô∏è Seeding automatique √©chou√©, tentative manuelle..."
              docker compose exec -T backend node -e "
                console.log('üå± Seed manuel...');
                require('./src/scripts/seed-production.js').seedProduction();
              "
            }
            
            echo "üéâ D√©ploiement, seeding et migration termin√©s avec succ√®s!"
