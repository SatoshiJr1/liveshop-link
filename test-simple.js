#!/usr/bin/env node

/**
 * Test simple du syst√®me de notifications
 */

const io = require('socket.io-client');

console.log('üß™ Test simple du syst√®me de notifications en temps r√©el');
console.log('='.repeat(60));

// Test 1: Connexion Socket.IO
console.log('\n1Ô∏è‚É£ Test connexion Socket.IO...');

const socket = io('http://localhost:3001', {
  transports: ['websocket', 'polling'],
  timeout: 5000
});

socket.on('connect', () => {
  console.log('‚úÖ Socket.IO connect√© avec succ√®s !');
  console.log(`   Socket ID: ${socket.id}`);
  
  // Test 2: Ping/Pong
  console.log('\n2Ô∏è‚É£ Test ping/pong...');
  socket.emit('ping');
});

socket.on('pong', (latency) => {
  console.log(`‚úÖ Pong re√ßu ! Latence: ${latency}ms`);
  
  // Test 3: √âcouter les √©v√©nements
  console.log('\n3Ô∏è‚É£ √âcoute des √©v√©nements...');
  
  socket.on('new_order', (data) => {
    console.log('‚úÖ √âv√©nement new_order re√ßu:', data);
  });
  
  socket.on('notification', (data) => {
    console.log('‚úÖ √âv√©nement notification re√ßu:', data);
  });
  
  console.log('‚úÖ Listeners configur√©s');
  console.log('\nüéØ Syst√®me pr√™t ! Les notifications seront affich√©es ici.');
  console.log('   Cr√©ez une commande depuis l\'interface pour tester.');
  console.log('   Appuyez sur Ctrl+C pour arr√™ter.');
});

socket.on('connect_error', (error) => {
  console.error('‚ùå Erreur connexion Socket.IO:', error.message);
  process.exit(1);
});

socket.on('error', (error) => {
  console.error('‚ùå Erreur Socket.IO:', error);
});

// Gestion propre de l'arr√™t
process.on('SIGINT', () => {
  console.log('\n\nüõë Arr√™t du test...');
  socket.disconnect();
  process.exit(0);
});

// Timeout de s√©curit√©
setTimeout(() => {
  if (!socket.connected) {
    console.error('‚ùå Timeout - Impossible de se connecter au serveur');
    process.exit(1);
  }
}, 10000);
