const { sequelize } = require('../config/database');
const { Seller, Order, Product } = require('../models');
const notificationService = require('../services/notificationService');

async function testRealtimeSystem() {
  try {
    console.log('üß™ Test du syst√®me de notifications en temps r√©el...\n');

    // 1. V√©rifier Mansour
    const mansour = await Seller.findOne({ where: { name: 'Mansour' } });
    if (!mansour) {
      console.log('‚ùå Mansour non trouv√©');
      return;
    }

    console.log('‚úÖ Mansour trouv√©:', {
      id: mansour.id,
      name: mansour.name,
      link_id: mansour.public_link_id
    });

    // 2. V√©rifier global.notifySeller
    if (!global.notifySeller) {
      console.log('‚ùå global.notifySeller non disponible');
      console.log('üí° Red√©marrez le serveur pour activer les notifications');
      return;
    }

    console.log('‚úÖ global.notifySeller disponible');

    // 3. Test de notification de nouvelle commande
    console.log('\nüì¶ Test notification nouvelle commande...');
    const testOrder = {
      id: 999,
      customer_name: 'Client Test',
      total_price: 50000,
      product: {
        name: 'Produit Test'
      }
    };

    await notificationService.sendRealtimeNotification(
      mansour.id,
      'new_order',
      { order: testOrder }
    );

    // 4. Test de notification de mise √† jour de commande
    console.log('\nüì¶ Test notification mise √† jour commande...');
    const updatedOrder = {
      id: 999,
      customer_name: 'Client Test',
      status: 'pay√©',
      total_price: 50000
    };

    await notificationService.sendRealtimeNotification(
      mansour.id,
      'order_status_update',
      { order: updatedOrder }
    );

    // 5. Test de notification de mise √† jour de produit
    console.log('\nüì¶ Test notification mise √† jour produit...');
    const testProduct = {
      id: 1,
      name: 'Produit Mis √† Jour',
      price: 75000
    };

    await notificationService.sendRealtimeNotification(
      mansour.id,
      'product_updated',
      { product: testProduct }
    );

    // 6. Test de notification de mise √† jour de cr√©dits
    console.log('\nüí∞ Test notification mise √† jour cr√©dits...');
    await notificationService.sendRealtimeNotification(
      mansour.id,
      'credits_updated',
      { 
        newCredits: 150,
        change: 50,
        reason: 'Achat de cr√©dits'
      }
    );

    // 7. V√©rifier les notifications en base
    const { Notification } = require('../models');
    const notifications = await Notification.findAll({
      where: { seller_id: mansour.id },
      order: [['created_at', 'DESC']],
      limit: 5
    });

    console.log(`\nüìã ${notifications.length} notifications cr√©√©es en base`);

    // 8. Instructions pour tester
    console.log('\nüéØ Instructions pour tester:');
    console.log('1. Connectez-vous √† l\'app vendeur: http://localhost:5174/');
    console.log('2. V√©rifiez l\'indicateur de notification dans le header');
    console.log('3. Cliquez sur l\'ic√¥ne de notification pour voir les d√©tails');
    console.log('4. Passez une vraie commande depuis: http://localhost:5173/kbzd7r6a52');
    console.log('5. V√©rifiez que la notification appara√Æt en temps r√©el');

    // 9. V√©rifier les √©v√©nements WebSocket
    console.log('\nüîß √âv√©nements WebSocket configur√©s:');
    console.log('   ‚úÖ new_notification - Nouvelles notifications');
    console.log('   ‚úÖ order_updated - Mises √† jour de commandes');
    console.log('   ‚úÖ product_updated - Mises √† jour de produits');
    console.log('   ‚úÖ stats_updated - Mises √† jour de statistiques');
    console.log('   ‚úÖ credits_updated - Mises √† jour de cr√©dits');

    // 10. V√©rifier l'actualisation automatique
    console.log('\nüîÑ Actualisation automatique configur√©e:');
    console.log('   ‚úÖ Toutes les 30 secondes');
    console.log('   ‚úÖ Bas√©e sur les notifications');
    console.log('   ‚úÖ Lors du retour en ligne');
    console.log('   ‚úÖ Lors du focus de la fen√™tre');
    console.log('   ‚úÖ √âv√©nements sp√©cifiques d√©clench√©s');

    await sequelize.close();
    console.log('\n‚úÖ Test termin√©');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    await sequelize.close();
  }
}

testRealtimeSystem(); 