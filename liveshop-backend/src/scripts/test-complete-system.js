const { sequelize } = require('../config/database');
const { Product, Order } = require('../models');
const { uploadProductImage, uploadPaymentProof, deleteImage } = require('../config/cloudinary');
const fs = require('fs');
const path = require('path');

async function testCompleteSystem() {
  console.log('üß™ Test complet du syst√®me Cloudinary...\n');

  try {
    // 1. Test de configuration
    console.log('1Ô∏è‚É£ Test de configuration...');
    const cloudinary = require('cloudinary').v2;
    const config = cloudinary.config();
    console.log('‚úÖ Configuration Cloudinary:', {
      cloud_name: config.cloud_name,
      api_key: config.api_key ? '‚úÖ Configur√©' : '‚ùå Manquant',
      api_secret: config.api_secret ? '‚úÖ Configur√©' : '‚ùå Manquant'
    });

    // 2. Test de connexion
    console.log('\n2Ô∏è‚É£ Test de connexion...');
    try {
      const result = await cloudinary.api.ping();
      console.log('‚úÖ Connexion Cloudinary:', result);
    } catch (error) {
      console.log('‚ùå Erreur connexion:', error.message);
    }

    // 3. Cr√©er une image de test
    console.log('\n3Ô∏è‚É£ Cr√©ation image de test...');
    const testImagePath = path.join(__dirname, 'test-image.svg');
    const svgContent = `
      <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
        <rect width="200" height="200" fill="#4F46E5"/>
        <circle cx="100" cy="100" r="50" fill="#F59E0B"/>
        <text x="100" y="110" text-anchor="middle" fill="white" font-size="16">TEST</text>
      </svg>
    `;
    fs.writeFileSync(testImagePath, svgContent);
    console.log('‚úÖ Image de test cr√©√©e');

    // 4. Test upload produit
    console.log('\n4Ô∏è‚É£ Test upload produit...');
    const productUpload = await uploadProductImage.single('image')({
      file: {
        path: testImagePath,
        originalname: 'test-product.svg',
        mimetype: 'image/svg+xml'
      }
    }, {
      json: () => ({ success: true })
    });
    console.log('‚úÖ Upload produit:', productUpload);

    // 5. Test upload preuve de paiement
    console.log('\n5Ô∏è‚É£ Test upload preuve de paiement...');
    const paymentUpload = await uploadPaymentProof.single('image')({
      file: {
        path: testImagePath,
        originalname: 'test-payment.svg',
        mimetype: 'image/svg+xml'
      }
    }, {
      json: () => ({ success: true })
    });
    console.log('‚úÖ Upload preuve de paiement:', paymentUpload);

    // 6. Test cr√©ation produit avec image Cloudinary
    console.log('\n6Ô∏è‚É£ Test cr√©ation produit...');
    const testProduct = await Product.create({
      seller_id: 1,
      name: 'Produit Test Cloudinary',
      description: 'Produit de test avec image Cloudinary',
      price: 9999.99,
      category: 'general',
      stock_quantity: 10,
      image_url: productUpload.url,
      image_metadata: JSON.stringify({
        publicId: productUpload.public_id,
        url: productUpload.url,
        format: productUpload.format,
        size: productUpload.bytes
      })
    });
    console.log('‚úÖ Produit cr√©√©:', testProduct.id);

    // 7. Test cr√©ation commande avec preuve de paiement
    console.log('\n7Ô∏è‚É£ Test cr√©ation commande...');
    const testOrder = await Order.create({
      seller_id: 1,
      product_id: testProduct.id,
      customer_name: 'Client Test',
      customer_phone: '+221777777777',
      customer_address: 'Adresse Test',
      quantity: 1,
      total_price: 9999.99,
      payment_method: 'wave',
      payment_proof_url: paymentUpload.url,
      status: 'pending'
    });
    console.log('‚úÖ Commande cr√©√©e:', testOrder.id);

    // 8. Test r√©cup√©ration des donn√©es
    console.log('\n8Ô∏è‚É£ Test r√©cup√©ration des donn√©es...');
    const productWithImage = await Product.findByPk(testProduct.id);
    const orderWithProof = await Order.findByPk(testOrder.id);
    
    console.log('‚úÖ Produit avec image:', {
      id: productWithImage.id,
      name: productWithImage.name,
      image_url: productWithImage.image_url,
      has_metadata: !!productWithImage.image_metadata
    });
    
    console.log('‚úÖ Commande avec preuve:', {
      id: orderWithProof.id,
      payment_proof_url: orderWithProof.payment_proof_url
    });

    // 9. Test suppression des images de test
    console.log('\n9Ô∏è‚É£ Test suppression des images...');
    if (productUpload.public_id) {
      await deleteImage(productUpload.public_id);
      console.log('‚úÖ Image produit supprim√©e');
    }
    if (paymentUpload.public_id) {
      await deleteImage(paymentUpload.public_id);
      console.log('‚úÖ Image preuve supprim√©e');
    }

    // 10. Nettoyage des donn√©es de test
    console.log('\nüîü Nettoyage des donn√©es...');
    await testOrder.destroy();
    await testProduct.destroy();
    console.log('‚úÖ Donn√©es de test supprim√©es');

    // 11. Nettoyage du fichier temporaire
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath);
      console.log('‚úÖ Fichier temporaire supprim√©');
    }

    console.log('\nüéâ Test complet r√©ussi !');
    console.log('\nüìä R√©sum√© :');
    console.log('  ‚úÖ Configuration Cloudinary');
    console.log('  ‚úÖ Connexion API');
    console.log('  ‚úÖ Upload d\'images');
    console.log('  ‚úÖ Stockage en base');
    console.log('  ‚úÖ R√©cup√©ration des donn√©es');
    console.log('  ‚úÖ Suppression d\'images');
    console.log('  ‚úÖ Nettoyage des donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    throw error;
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testCompleteSystem()
    .then(() => {
      console.log('\n‚úÖ Test termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Test √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = { testCompleteSystem }; 