const { sequelize } = require('../config/database');
const { Order } = require('../models');

async function testPaymentProof() {
  try {
    console.log('üîç Test de visualisation des preuves de paiement...\n');

    // 1. V√©rifier les commandes avec preuves
    const ordersWithProof = await Order.findAll({
      where: {
        payment_proof_url: {
          [require('sequelize').Op.not]: null
        }
      },
      order: [['created_at', 'DESC']],
      limit: 5
    });

    console.log(`‚úÖ ${ordersWithProof.length} commandes avec preuves trouv√©es`);

    if (ordersWithProof.length === 0) {
      console.log('‚ùå Aucune commande avec preuve de paiement trouv√©e');
      console.log('üí° Cr√©ez une commande avec preuve depuis l\'interface client');
      return;
    }

    // 2. Afficher les d√©tails des preuves
    console.log('\nüìã D√©tails des preuves de paiement:');
    ordersWithProof.forEach((order, index) => {
      console.log(`\n${index + 1}. Commande #${order.id}:`);
      console.log(`   Client: ${order.customer_name}`);
      console.log(`   M√©thode: ${order.payment_method}`);
      console.log(`   Preuve URL: ${order.payment_proof_url}`);
      console.log(`   URL compl√®te: http://localhost:3001/api/upload${order.payment_proof_url}`);
    });

    // 3. Tester l'acc√®s aux images
    console.log('\nüß™ Test d\'acc√®s aux images...');
    const testOrder = ordersWithProof[0];
    
    if (testOrder.payment_proof_url) {
      const imageUrl = `http://localhost:3001/api/upload${testOrder.payment_proof_url}`;
      console.log(`üì∏ Test de l'image: ${imageUrl}`);
      
      // V√©rifier si le fichier existe physiquement
      const fs = require('fs');
      const path = require('path');
      const filePath = path.join(__dirname, '../../uploads', testOrder.payment_proof_url.replace('/uploads/', ''));
      
      if (fs.existsSync(filePath)) {
        console.log('‚úÖ Fichier image trouv√© sur le serveur');
        const stats = fs.statSync(filePath);
        console.log(`   Taille: ${(stats.size / 1024).toFixed(2)} KB`);
      } else {
        console.log('‚ùå Fichier image non trouv√© sur le serveur');
        console.log(`   Chemin recherch√©: ${filePath}`);
      }
    }

    // 4. Instructions pour tester
    console.log('\nüéØ Instructions pour tester:');
    console.log('1. Allez dans l\'app vendeur: http://localhost:5174/');
    console.log('2. Cliquez sur "Commandes" dans le menu');
    console.log('3. Cliquez sur "Voir" pour une commande avec preuve');
    console.log('4. Cliquez sur "Voir la preuve" dans les d√©tails');
    console.log('5. L\'image devrait s\'afficher correctement');

    // 5. V√©rifier les routes d'upload
    console.log('\nüîß V√©rification des routes d\'upload:');
    console.log('‚úÖ Route POST /api/upload/image - Upload d\'images');
    console.log('‚úÖ Route GET /api/upload/uploads/:filename - Servir les images');
    console.log('‚úÖ Dossier uploads/ - Stockage local');

    await sequelize.close();
    console.log('\n‚úÖ Test termin√©');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    await sequelize.close();
  }
}

testPaymentProof(); 