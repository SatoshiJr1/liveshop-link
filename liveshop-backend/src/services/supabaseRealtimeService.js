const { createClient } = require('@supabase/supabase-js');

class SupabaseRealtimeService {
  constructor() {
    this.supabase = null;
    this.isProduction = process.env.NODE_ENV === 'production';
    
    if (this.isProduction) {
      this.initializeSupabase();
    }
  }

  initializeSupabase() {
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

    if (!supabaseUrl || !supabaseServiceKey) {
      console.warn('‚ö†Ô∏è Variables Supabase manquantes pour le temps r√©el');
      return;
    }

    this.supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: { autoRefreshToken: false, persistSession: false }
    });

    console.log('‚úÖ Service Supabase Realtime initialis√©');
  }

  // Notifier un changement de produit
  async notifyProductChange(eventType, productData) {
    if (!this.isProduction || !this.supabase) {
      console.log(`üîÑ [DEV] Simulation √©v√©nement: ${eventType}`, productData.id);
      return;
    }

    try {
      // Ins√©rer dans la table products pour d√©clencher le temps r√©el
      const { data, error } = await this.supabase
        .from('products')
        .upsert([productData], { onConflict: 'id' });

      if (error) {
        console.error('‚ùå Erreur notification Supabase:', error);
      } else {
        console.log(`‚úÖ √âv√©nement ${eventType} envoy√© √† Supabase:`, productData.id);
      }
    } catch (error) {
      console.error('‚ùå Erreur service Supabase:', error);
    }
  }

  // M√©thodes sp√©cifiques pour chaque type d'√©v√©nement
  async notifyProductCreated(product) {
    return this.notifyProductChange('INSERT', product);
  }

  async notifyProductUpdated(product) {
    return this.notifyProductChange('UPDATE', product);
  }

  async notifyProductDeleted(productId) {
    if (!this.isProduction || !this.supabase) {
      console.log(`üîÑ [DEV] Simulation suppression: ${productId}`);
      return;
    }

    try {
      const { error } = await this.supabase
        .from('products')
        .delete()
        .eq('id', productId);

      if (error) {
        console.error('‚ùå Erreur suppression Supabase:', error);
      } else {
        console.log(`‚úÖ Suppression envoy√©e √† Supabase: ${productId}`);
      }
    } catch (error) {
      console.error('‚ùå Erreur service Supabase:', error);
    }
  }

  // Notifier un changement de commande
  async notifyOrderChange(eventType, orderData) {
    if (!this.isProduction || !this.supabase) {
      console.log(`üîÑ [DEV] Simulation √©v√©nement commande: ${eventType}`, orderData.id);
      return;
    }

    try {
      const { data, error } = await this.supabase
        .from('orders')
        .upsert([orderData], { onConflict: 'id' });

      if (error) {
        console.error('‚ùå Erreur notification commande Supabase:', error);
      } else {
        console.log(`‚úÖ √âv√©nement commande ${eventType} envoy√©:`, orderData.id);
      }
    } catch (error) {
      console.error('‚ùå Erreur service commande Supabase:', error);
    }
  }

  // V√©rifier la connexion Supabase
  async testConnection() {
    if (!this.isProduction || !this.supabase) {
      console.log('üîÑ [DEV] Test connexion simul√©');
      return true;
    }

    try {
      const { data, error } = await this.supabase
        .from('products')
        .select('count')
        .limit(1);

      if (error) {
        console.error('‚ùå Test connexion Supabase √©chou√©:', error);
        return false;
      }

      console.log('‚úÖ Test connexion Supabase r√©ussi');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur test connexion Supabase:', error);
      return false;
    }
  }
}

module.exports = new SupabaseRealtimeService(); 