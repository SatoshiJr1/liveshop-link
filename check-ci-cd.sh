#!/bin/bash

echo "üîç Analyse CI/CD - LiveShop Link"
echo "================================"

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier la pr√©sence de GitHub Actions
if [ -d ".github/workflows" ]; then
    print_success "GitHub Actions d√©tect√© !"
    echo ""
    print_status "üìÅ Workflows disponibles :"
    
    for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
        if [ -f "$workflow" ]; then
            echo "  - $(basename "$workflow")"
        fi
    done
    
    echo ""
    print_status "üîç Analyse des workflows :"
    
    for workflow in .github/workflows/*.yml .github/workflows/*.yaml; do
        if [ -f "$workflow" ]; then
            echo ""
            echo "üìã **$(basename "$workflow")** :"
            
            # Extraire les triggers
            if grep -q "on:" "$workflow"; then
                echo "  üöÄ Triggers :"
                grep -A 10 "on:" "$workflow" | grep -E "(push|pull_request|workflow_dispatch)" | sed 's/^/    - /'
            fi
            
            # Extraire les jobs
            if grep -q "jobs:" "$workflow"; then
                echo "  ‚öôÔ∏è  Jobs :"
                grep -A 20 "jobs:" "$workflow" | grep "^\s*[a-zA-Z].*:" | head -5 | sed 's/^/    - /'
            fi
            
            # Extraire les √©tapes de d√©ploiement
            if grep -q "deploy\|docker\|build" "$workflow"; then
                echo "  üöÄ D√©ploiement d√©tect√© :"
                grep -i "deploy\|docker\|build" "$workflow" | head -3 | sed 's/^/    - /'
            fi
        fi
    done
else
    print_warning "Aucun GitHub Actions d√©tect√©"
fi

# V√©rifier la pr√©sence d'autres outils CI/CD
echo ""
print_status "üîç Autres outils CI/CD :"

# Vercel
if [ -f "vercel.json" ]; then
    print_success "Vercel d√©tect√© !"
    echo "  - D√©ploiement automatique sur Vercel"
    echo "  - Se d√©clenche sur push vers main"
fi

# Netlify
if [ -f "netlify.toml" ] || [ -f "_redirects" ]; then
    print_success "Netlify d√©tect√© !"
    echo "  - D√©ploiement automatique sur Netlify"
    echo "  - Se d√©clenche sur push vers main"
fi

# Docker Hub
if [ -f "docker-compose.yml" ] || [ -f "Dockerfile" ]; then
    print_status "Docker d√©tect√© !"
    echo "  - Images Docker √† construire"
    echo "  - V√©rifiez si vous avez un registry configur√©"
fi

# V√©rifier les variables d'environnement
echo ""
print_status "üîê Variables d'environnement :"

if [ -f ".env.example" ]; then
    print_success ".env.example trouv√©"
    echo "  - Variables n√©cessaires pour le d√©ploiement"
fi

if [ -f ".github/secrets" ] || [ -d ".github/secrets" ]; then
    print_success "Secrets GitHub d√©tect√©s"
    echo "  - Variables sensibles stock√©es dans GitHub"
fi

# V√©rifier les scripts de d√©ploiement
echo ""
print_status "üìú Scripts de d√©ploiement :"

DEPLOY_SCRIPTS=$(ls deploy*.sh 2>/dev/null | wc -l)
if [ $DEPLOY_SCRIPTS -gt 0 ]; then
    print_success "$DEPLOY_SCRIPTS script(s) de d√©ploiement trouv√©(s)"
    echo "  - Ces scripts sont pour le d√©ploiement manuel"
    echo "  - Votre CI/CD utilise probablement d'autres m√©thodes"
fi

# Explication du workflow
echo ""
print_status "üìö Comment fonctionne votre d√©ploiement :"
echo ""
echo "üîÑ **Workflow Automatique (CI/CD) :**"
echo "  1. Vous faites un commit et push"
echo "  2. Vous cr√©ez une Pull Request"
echo "  3. Le CI/CD se d√©clenche automatiquement"
echo "  4. Les tests s'ex√©cutent"
echo "  5. Si les tests passent, le d√©ploiement se fait"
echo "  6. Vous mergez la PR"
echo "  7. Le d√©ploiement en production se fait"
echo ""
echo "üè† **D√©ploiement Local (Scripts cr√©√©s) :**"
echo "  - Pour tester avant de cr√©er la PR"
echo "  - Pour le d√©veloppement local"
echo "  - Pour le d√©bogage"
echo "  - Pour les d√©ploiements d'urgence"
echo ""

# Recommandations
echo ""
print_status "üí° Recommandations :"
echo ""
echo "‚úÖ **Avant de cr√©er une PR :**"
echo "  - Utilisez ./deploy-watch.sh pour voir les modifications"
echo "  - Utilisez ./deploy-local.sh pour tester localement"
echo "  - Utilisez ./prepare-pr.sh pour pr√©parer votre PR"
echo ""
echo "üöÄ **Pour le d√©ploiement :**"
echo "  - Laissez votre CI/CD g√©rer le d√©ploiement automatique"
echo "  - Les scripts cr√©√©s sont pour le d√©veloppement local"
echo "  - V√©rifiez que votre pipeline CI/CD est bien configur√©"
echo ""
echo "üîç **Pour comprendre votre CI/CD :**"
echo "  - Regardez dans .github/workflows/"
echo "  - V√©rifiez les secrets GitHub"
echo "  - Testez avec une petite PR"
echo ""

print_success "üéâ Analyse CI/CD termin√©e !"
echo ""
echo "üí° **Prochaines √©tapes :**"
echo "1. V√©rifiez votre configuration CI/CD dans .github/workflows/"
echo "2. Testez avec une petite PR pour voir le d√©ploiement automatique"
echo "3. Utilisez les scripts cr√©√©s pour le d√©veloppement local"
echo "4. Configurez des notifications pour vos d√©ploiements"
